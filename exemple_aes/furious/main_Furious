#include <iostream>
#include <string>
#include <fstream>
#include "construction.h"
#include <time.h>
#include <opengm/graphicalmodel/graphicalmodel_hdf5.hxx>

using namespace std;



int main()

{

    ifstream fichier("./furious_round1", ios::in);
    ifstream fichierH("./furious_round1_leak", ios::in);
    std::vector<std::string> instruction;
    std::string hamming ;


    if(fichier && fichierH)

    {
        getline(fichierH,hamming);
        for(int i = 0 ; i < 501 ; i++){

            string contenu;
            std::string token;
            getline(fichier, contenu);
            if(contenu[50]==' '){
                token = contenu.substr(51, contenu.size());


            }else if(contenu.at(60)==' '){
                token = contenu.substr(61, contenu.size());

            }else{
                token = contenu.substr(84, contenu.size());

            }

            instruction.push_back(token);




        }
        fichier.close();

    }

    else{

        cerr << "Impossible d'ouvrir le fichier input!" << endl;
    }

    std::map<std::string,std::vector<std::vector<std::vector<float> > > > proba;
    std::map<std::string,std::vector<int> > link;
    std::vector<int> var;
    std::map<std::string,int> fonction ;
    std::map<std::string,std::vector<int> > select ;


    std::vector<int> plaintext(4);
    plaintext[0]=169;
    plaintext[1]=50;
    plaintext[2]=228;
    plaintext[3]=50;
    std::vector<int> plaintext2(4);
    plaintext2[0]=172;
    plaintext2[1]=67;
    plaintext2[2]=231;
    plaintext2[3]=67;
    std::vector<int> plaintext3(4);
    plaintext3[0]=175;
    plaintext3[1]=246;
    plaintext3[2]=234;
    plaintext3[3]=246;
    std::vector<int> plaintext4(4);
    plaintext4[0]=178;
    plaintext4[1]=168;
    plaintext4[2]=237;
    plaintext4[3]=168;
    std::vector<int> plaintext5(4);
    plaintext5[0]=181;
    plaintext5[1]=138;
    plaintext5[2]=240;
    plaintext5[3]=138;
    std::vector<int> plaintext6(4);
    plaintext6[0]=184;
    plaintext6[1]=90;
    plaintext6[2]=243;
    plaintext6[3]=90;
    std::vector<int> plaintext7(4);
    plaintext7[0]=187;
    plaintext7[1]=48;
    plaintext7[2]=246;
    plaintext7[3]=48;
    std::vector<int> plaintext8(4);
    plaintext8[0]=190;
    plaintext8[1]=141;
    plaintext8[2]=249;
    plaintext8[3]=141;
    std::vector<int> plaintext9(4);
    plaintext9[0]=193;
    plaintext9[1]=49;
    plaintext9[2]=252;
    plaintext9[3]=49;
    std::vector<int> plaintext10(4);
    plaintext10[0]=196;
    plaintext10[1]=49;
    plaintext10[2]=255;
    plaintext10[3]=49;
    std::vector<int> plaintext11(4);
    plaintext11[0]=199;
    plaintext11[1]=152;
    plaintext11[2]=258;
    plaintext11[3]=152;
    std::vector<int> plaintext12(4);
    plaintext12[0]=202;
    plaintext12[1]=162;
    plaintext12[2]=261;
    plaintext12[3]=162;
    std::vector<int> plaintext13(4);
    plaintext13[0]=205;
    plaintext13[1]=224;
    plaintext13[2]=264;
    plaintext13[3]=224;
    std::vector<int> plaintext14(4);
    plaintext14[0]=208;
    plaintext14[1]=55;
    plaintext14[2]=267;
    plaintext14[3]=55;
    std::vector<int> plaintext15(4);
    plaintext15[0]=211;
    plaintext15[1]=7;
    plaintext15[2]=270;
    plaintext15[3]=7;
    std::vector<int> plaintext16(4);
    plaintext16[0]=214;
    plaintext16[1]=52;
    plaintext16[2]=273;
    plaintext16[3]=52;

    select["R0"]=plaintext;
    select["R1"]=plaintext2;
    select["R2"]=plaintext3;
    select["R3"]=plaintext4;
    select["R4"]=plaintext5;
    select["R5"]=plaintext6;
    select["R6"]=plaintext7;
    select["R7"]=plaintext8;
    select["R8"]=plaintext9;
    select["R9"]=plaintext10;
    select["R10"]=plaintext11;
    select["R11"]=plaintext12;
    select["R12"]=plaintext13;
    select["R13"]=plaintext14;
    select["R14"]=plaintext15;
    select["R15"]=plaintext16;

    std::map<int,int > res ;
    res[500]=76;
    res[492]=38;
    res[484]=6;
    res[476]=40;
    res[463]=122;
    res[455]=211;
    res[447]=248;
    res[439]=72;
    res[426]=154;
    res[418]=25;
    res[410]=203;
    res[402]=224;
    res[389]=229;
    res[381]=128;
    res[373]=102;
    res[365]=4;
    res[23]=103;


    std::map<int,std::vector <int> > box;
    std::vector<int> sbox= {99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22};
      std::vector<int> sbox2={0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,27,25,31,29,19,17,23,21,11,9,15,13,3,1,7,5,59,57,63,61,51,49,55,53,43,41,47,45,35,33,39,37,91,89,95,93,83,81,87,85,75,73,79,77,67,65,71,69,123,121,127,125,115,113,119,117,107,105,111,109,99,97,103,101,155,153,159,157,147,145,151,149,139,137,143,141,131,129,135,133,187,185,191,189,179,177,183,181,171,169,175,173,163,161,167,165,219,217,223,221,211,209,215,213,203,201,207,205,195,193,199,197,251,249,255,253,243,241,247,245,235,233,239,237,227,225,231,229};

    box[101]=sbox;
    box[107]=sbox;
    box[112]=sbox;
    box[117]=sbox;

    box[280]=sbox;
    box[284]=sbox;
    box[288]=sbox;
    box[292]=sbox;
    box[297]=sbox;
    box[301]=sbox;
    box[305]=sbox;
    box[309]=sbox;
    box[314]=sbox;
    box[318]=sbox;
    box[323]=sbox;
    box[327]=sbox;
    box[332]=sbox;
    box[336]=sbox;
    box[340]=sbox;
    box[344]=sbox;

    box[361]=sbox2;
    box[369]=sbox2;
    box[377]=sbox2;
    box[385]=sbox2;
    box[398]=sbox2;
    box[406]=sbox2;
    box[414]=sbox2;
    box[422]=sbox2;
    box[435]=sbox2;
    box[443]=sbox2;
    box[451]=sbox2;
    box[459]=sbox2;
    box[472]=sbox2;
    box[480]=sbox2;
    box[488]=sbox2;
    box[496]=sbox2;





    std::cout << "debut transformation "<< std::endl;

    transformationASM(instruction,proba,link,var,fonction,hamming,select,res,box,false,true);

    std::cout << "fini transformation "<< std::endl;

    Model gm = modelCreation(fonction,proba,link,var);


    double elapsedTime;
    clock_t stopTime;
    clock_t startTime = clock();
    std::vector<std::string> output;
    bool keyPosition = true;
     std::vector<int> nodeKey;
     nodeKey.push_back(6);
     nodeKey.push_back(7);
     nodeKey.push_back(8);
     nodeKey.push_back(9);
     nodeKey.push_back(10);
     nodeKey.push_back(11);
     nodeKey.push_back(12);
     nodeKey.push_back(13);
     nodeKey.push_back(14);
     nodeKey.push_back(15);
     nodeKey.push_back(16);
     nodeKey.push_back(17);
     nodeKey.push_back(18);
     nodeKey.push_back(19);
     nodeKey.push_back(20);
     nodeKey.push_back(21);

     beliefPropagation(gm,output,0,true,keyPosition,nodeKey);

    stopTime = clock();
    elapsedTime = (stopTime - startTime) / (CLOCKS_PER_SEC / (double) 1000.0);
    std::cout << "temp :"<<elapsedTime<< std::endl;
    ofstream fichierOut("../output", ios::out);



    if(fichierOut)

    {
        for(int i = 0 ; i < output.size() ; i++){
            fichierOut << output[i] << std::endl;
        }
        fichier.close();

    }

    else{

        cerr << "Impossible d'ouvrir le fichier out!" << endl;
    }


    return 0;

}

